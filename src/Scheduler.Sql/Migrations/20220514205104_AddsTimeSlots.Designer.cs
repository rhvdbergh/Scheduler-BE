// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scheduler.Infra.Sql.Base;

#nullable disable

namespace Scheduler.Infra.Sql.Migrations
{
    [DbContext(typeof(SchedulerDbContext))]
    [Migration("20220514205104_AddsTimeSlots")]
    partial class AddsTimeSlots
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Scheduler.Core.Models.LectureGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<int>("LectureDaysPerWeek")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("SeasonId");

                    b.ToTable("LectureGroups");
                });

            modelBuilder.Entity("Scheduler.Core.Models.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("MaxLectureGroups")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.Property<bool>("isAdjunct")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("Scheduler.Core.Models.ProfessorPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("NotPreferredDay")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("NotPreferredTime")
                        .HasColumnType("time(6)");

                    b.Property<int?>("PreferredDay")
                        .HasColumnType("int");

                    b.Property<TimeOnly?>("PreferredTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("ProfessorPreferences");
                });

            modelBuilder.Entity("Scheduler.Core.Models.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(127)
                        .HasColumnType("varchar(127)");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Scheduler.Core.Models.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsBreak")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("LectureGroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("char(36)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("LectureGroupId");

                    b.HasIndex("SeasonId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("Scheduler.Core.Models.LectureGroup", b =>
                {
                    b.HasOne("Scheduler.Core.Models.Professor", "Professor")
                        .WithMany("LectureGroups")
                        .HasForeignKey("ProfessorId");

                    b.HasOne("Scheduler.Core.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Scheduler.Core.Models.ProfessorPreference", b =>
                {
                    b.HasOne("Scheduler.Core.Models.Professor", "Professor")
                        .WithMany("ProfessorPreferences")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Scheduler.Core.Models.TimeSlot", b =>
                {
                    b.HasOne("Scheduler.Core.Models.LectureGroup", "LectureGroup")
                        .WithMany("TimeSlots")
                        .HasForeignKey("LectureGroupId");

                    b.HasOne("Scheduler.Core.Models.Season", "Season")
                        .WithMany("TimeSlots")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LectureGroup");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Scheduler.Core.Models.LectureGroup", b =>
                {
                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Scheduler.Core.Models.Professor", b =>
                {
                    b.Navigation("LectureGroups");

                    b.Navigation("ProfessorPreferences");
                });

            modelBuilder.Entity("Scheduler.Core.Models.Season", b =>
                {
                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
